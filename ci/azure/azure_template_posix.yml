# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

parameters:
  # defaults for any parameters that are not specified
  name: ''
  vmImage: ''


jobs:

- job: ${{ parameters.name }}Test
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      python_38_coverage:
        python.version: '3.8'
        ARCH_CYTHON_COVERAGE: true
      python_38_statsmodels_master:
        python.version: '3.8'
        STATSMODELS_MASTER: true
        COVERAGE: false
      python37:
        python.version: '3.7'
        NUMPY: 1.16.6
        SCIPY: 1.2.3
        MATPLOTLIB: 2.2.5
        PANDAS: 0.23.4
      python_38_numba:
        python.version: '3.8'
        USE_NUMBA: true
        MATPLOTLIB: 3.3.3
        PYTEST_PATTERN: "(slow or not slow)"
      python37_numpy117:
        python.version: '3.7'
        MATPLOTLIB: 3.0.3
        NUMPY: 1.17.5
      python_3.9:
        python.version: '3.9'
        TEST_INSTALL: true
      python_38_no_numba:
        python.version: '3.8'
        USE_NUMBA: false
        MATPLOTLIB: 3.3.3
        PYTEST_PATTERN: "(slow or not slow)"
      python_38_numpy_118:
        python.version: '3.8'
        NUMPY: 1.18.5
        USE_NUMBA: false
        PYTEST_PATTERN: "(slow or not slow)"
    maxParallel: 10

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
    displayName: 'Use Python $(python.version)'

  - script: |
      python -m pip install --upgrade pip setuptools wheel
      source ci/azure/install-posix.sh
      jupyter kernelspec list
    displayName: 'Install dependencies'

  - script: |
     flake8 arch
     black --check arch
     isort --check arch
    displayName: 'Check style and formatting'

  - script: |
      python -m pip list
    displayName: 'List Configuration'

  - script: |
      if [[ ${TEST_INSTALL} == true ]]; then
        echo "Installing to site packages"
        python setup.py bdist_wheel
        WHL=$(ls -t dist)
        pip install ./dist/${WHL}
      else
        echo "Editable install"
        python -m pip install -e . -v --no-build-isolation
      fi
    displayName: 'Install arch'

  - script: |
      echo ${TEST_INSTALL}
      if [[ ${TEST_INSTALL} == true ]]; then
        echo "Testing site packages"
        mkdir test_run_dir
        pushd test_run_dir
        python -c "import arch; arch.test()"
        popd
      else
        echo "Testing editable install"
        pytest arch --junitxml=junit/test-results.xml -n auto --durations=25
      fi
    displayName: 'Run tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
